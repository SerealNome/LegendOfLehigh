<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerWalkNorth</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parObstacle</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Basic stats for the character
mySpeed = 4;        // How fast the character will move


// Other control variables
beenHit = false;         // Wether the character has been hit.
staggerTimer = 0;        // Timer for when hit, (flashing, no-damage, no-input, etc)
face = NORTH;            // Which way the character is facing
attacking = false;       // Currently performing an attack
controlsAble = true;     // Will the character will currently accept input
charging = false;
charge = 0;

amtAction = false;
amtAttack = false;
amtReleased = false;
amtHeld = false;
amtUp = false;
amtDown = false;
amtLeft = false;
amtRight = false;

z = 0;
w = 0;

stepCount = 0;
zoom = 0;

this = 0;

_newMask = 0;

SetSpritesBoy();

// First depth
depth = -1000001;

// Initialize view following
view_xview[0] = median(0, room_width-view_wview[0],  x-view_wview[0]/2);
view_yview[0] = median(0, room_height-view_hview[0], y-view_hview[0]/2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rmGanonCastle {
    switch (stepCount) {
        case 0:
            amtUp = true;
            break;
        case 40:
            amtUp = false;
            amtRight = true;
            break;
        case 80:
            amtUp = true;
            break;
        case 104:
            amtUp = false;
            break;
        case 108:
            amtRight = false;
            amtAttack = true;
            break;
        case 127:
            amtAttack = false;
            break;
        case 144:
            amtLeft = true;
            amtUp = true;
            break;
        case 172:
            amtLeft = false;
            break;
        case 184:
            amtUp = false;
            amtLeft = true;
            break;
        case 272:
            amtLeft = false;
            amtUp = true;
            break;
        case 287:
            amtUp = false;
            amtAttack = true;
            amtHeld = true;
            break;
        case 336:
            amtAttack = false;
            amtHeld = false;
            break;
        case 350:
            amtDown = true;
            amtLeft = true;
            break;
        case 351:
            amtDown = false;
            break;
        case 390:
            amtLeft = false;
            amtUp = true;
            break;
        case 391:
            amtUp = false;
            amtAttack = true;
            amtHeld = true;
            break;
        case 440:
            amtAttack = false;
            amtHeld = false;
            break;
        case 479:
            amtUp = true;
            amtRight = true;
            break;
        case 487:
            amtUp = false;
            break;
        case 499:
            amtRight = false;
            amtUp = true;
            break;
    }
}
if room == rmGanonRoom {
    switch (stepCount) {
        case 0:
            amtUp = true;
            break;
        case 8:
            amtUp = false;
            amtAction = true;
            this = instance_nearest(x, y, objGanon);
            break;
        case 9:
            amtAction = false;
            break;
        case 380:
            with (this) {
                instance_destroy();
            }
            amtUp = true;
            break;
        case 396:
            amtUp = false;
            amtAction = true;
            this = instance_nearest(x, y, objGanon);
            break;
        case 397:
            amtAction = false;
            break;
        case 582:
            with (this) {
                image_index = 2;
            }
            break;
        case 768:
            with (this) {
                image_index = 4;
            }
            with (instance_create(x, this.y + 32, objBolt)) {
                depth = -1000000;
            }
            break;
        case 900:
            amtUp = true;
            with (this) {
                image_index = 2;
            }
            break;
        case 916:
            amtUp = false;
            with (this) {
                image_index = 4;
            }
            with (instance_create(x, this.y + 32, objBolt)) {
                depth = -1000000;
            }
            break;
        case 996:
            amtAttack = true;
            break;
        case 997:
            amtAttack = false;
            break;
        case 1080:
            with (this) {
                image_index = 3;
            }
            break;
        case 1110:
            with (this) {
                image_index = 4;
            }
            break;
        case 1204:
            amtAttack = true;
            break;
        case 1205:
            amtAttack = false;
            break;
        case 1288:
            with (this) {
                image_index = 3;
            }
            break;
        case 1318:
            with (this) {
                image_index = 4;
            }
            break;
        case 1412:
            amtAttack = true;
            break;
        case 1413:
            amtAttack = false;
            break;
        case 1532:
            with (this) {
                image_index = 1;
                DialogueBegin(0);
                Dialogue("Agh! I grow tired of these games!");
                Dialogue("Take this!");
            }
            amtAction = true;
            break;
        case 1533:
            amtAction = false;
            break;
        case 1718:
            with (this) {
                image_index = 2;
            }
            break;
        case 1904:
            with (this) {
                SetSpritesGanonBeserk();
                image_index = 4;
            }
            with (instance_create(x, this.y + 32, objBolt)) {
                depth = -1000000;
                superBolt = true;
                image_xscale = 1.5;
                image_yscale = 1.5;
            }
            break;
        case 1939:
            attacking = true;
            amtAttack = true;
            amtHeld = true;
            SetSpriteFromFace(spriteAttackNorth, spriteAttackSouth, spriteAttackEast, spriteAttackWest);
            image_index = 0;
            image_speed = 0;
            _newMask = instance_create(x, y, objAnimatedStrike);
            _newMask.face = face;
            _newMask.spins = spins;
            _newMask.depth = depth;
            _newMask.image_speed = image_speed;
            with (_newMask) {
                var _weapon;
                _weapon = script_execute(objPlayerAnimate.equippedWeapon[ITEM_SPRITESET]);
                SetSpriteFromFace(_weapon);
            }
            break;
        case 1992:
            with (_newMask) {
                instance_destroy();
            }
            amtAttack = false;
            amtHeld = false;
            break;
        case 2090:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 1;
            }
            break;
        case 2144:
            var inst = this;
            this = instance_create(inst.x, inst.y, objGanon);
            with (inst) {
                instance_destroy();
            }
            with (this) {
                image_index = 1;
                SetAvatar("Ganon", avatarSprite);
                DialogueBegin(0);
                Dialogue("Well, well, well... it appears I've underestimated you.");
                Dialogue("I won't be taking any more chances.");
                Dialogue("Goodbye... young adventurer.");
            }
            amtAction = true;
            break;
        case 2145:
            amtAction = false;
            break;
        case 2330:
            with (this) {
                image_index = 4;
            }
            break;
        case 2516:
            with (this) {
                image_index = 2;
            }
            break;
        case 2702:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 2766:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 2830:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 2894:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 2958:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3018:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3074:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3112:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3128:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3144:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3152:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3160:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3164:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3168:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3170:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3172:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3174:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3176:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3177:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3178:
            with (this) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3179:
            with (this) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3180:
            with (this) {
                instance_destroy();
            }
            tile_layer_delete(1000000);
            tile_layer_delete(900000);
            tile_layer_delete(800000);
            instance_create(0, 0, objTransitionAnimate);
            break;
    }
}
if room == rmLehigh {
    z = 960 * (0.01 * zoom);
    w = 576 * (0.01 * zoom);
    if z &gt; 960 &amp;&amp; z &lt;= 4096 {
        view_wview[0] = z;
    }
    if w &gt; 576 &amp;&amp; w &lt;= 4096 {
        view_hview[0] = w;
    }
}

//-----------------------------------------------------------------------------
// General states

// If the game is paused, interrupt everything
if (objGameAnimate.isPaused)
    {
    image_index -= image_speed;
    exit;
    }

// Movement interrupt
canMove = !attacking
       &amp;&amp; !charging
       &amp;&amp; !instance_exists(objDialogueBox);
       
// Allow movement but disable input in certain cases
if (staggerTimer &gt; 0)
    controlsAble = false;

// Restore controls on new keypress (ex; after moving through door)
else if (!controlsAble)
    {
    var newKey;
    newKey = amtAction
          || amtAttack
          || amtUp
          || amtDown
          || amtLeft
          || amtRight;
    if (newKey)
        controlsAble = true;
    }


//-----------------------------------------------------------------------------
// Attacking
if (controlsAble)
    {
    var _pressed, _held;
    _pressed = amtAttack;
    _released = amtReleased;
    _held = amtHeld;
    if (_pressed)
    &amp;&amp; (canMove)
        {
        // Flag that we are attacking, and set for how long
        attacking = true;
        spins = 1;
        SetSpriteFromFace(spriteAttackNorth, spriteAttackSouth, spriteAttackEast, spriteAttackWest);
        image_index = 0;
        image_speed = 0.4;
        canMove = false;
        charge = 0;
        charging = false;
        
        // Create collision mask for the attack
        var _newStrikeMask;
        _newStrikeMask = instance_create(x, y, objAnimatedStrike);
        _newStrikeMask.face = face;
        _newStrikeMask.spins = spins;
        _newStrikeMask.depth = depth;
        _newStrikeMask.image_speed = image_speed;
        with (_newStrikeMask)
            {
            var _weapon;
            _weapon = script_execute(objPlayerAnimate.equippedWeapon[ITEM_SPRITESET]);
            SetSpriteFromFace(_weapon);
            }
        }
        
    if (_held) &amp;&amp; (_pressed || charging)
        {
        charging = true;
        //show_debug_message("Charging: "+string(charge));
        if (charge++ &gt;= 45)
            {
            attacking = true;
            spins = 2;
            sprite_index = sprBoyAttackSpecial;
            image_speed = 0.25;
            
            var _newStrikeMask;
            _newStrikeMask = instance_create(x, y, objAnimatedStrike);
            _newStrikeMask.face = face;
            _newStrikeMask.spins = spins;
            _newStrikeMask.depth = depth;
            _newStrikeMask.image_speed = image_speed;
            _newStrikeMask.sprite_index = sprBoyAttackSpecial;
            _newStrikeMask.visible = false;
            _newStrikeMask.bonusDamage = 1;
            
            charging = false;
            }
        }
        
    // If we were charging, but have released
    else if (_released) &amp;&amp; (charging)
        {
        charging = false;
        charge = 0;
        }
    }


//-----------------------------------------------------------------------------
// Action
_pressed = amtAction &amp;&amp; controlsAble;
if (_pressed)
&amp;&amp; (canMove)
    {
    // Find item we are looking at depending on direction
    var foundInst;
    foundInst = GetInstanceFromFace(parInteract);
    if (foundInst != noone)
        {
        switch (foundInst.object_index)
            {
            case (objChest):
                foundInst.image_speed = 0.1;
                break;
            case (objSign):
                ShowDialogue(foundInst);
                break;
            }
        }
        
    // Didn't find item. Try and find NPC.
    else
        {
        foundInst = this;
        if (foundInst != noone)
            {
            ShowDialogueAnimate(foundInst);
            foundInst.face = GetOppositeDirection(face);
            }
        }
    }


//-----------------------------------------------------------------------------
// Get input
var h_spd, v_spd;
h_spd = 0;
v_spd = 0;
if (canMove)
&amp;&amp; (controlsAble)
    {
    h_spd +=(amtRight-amtLeft) * mySpeed;
    v_spd +=(amtDown-amtUp) * mySpeed;
    if (amtUp)    {face = NORTH;}
    if (amtDown)  {face = SOUTH;}
    if (amtRight) {face = EAST;}
    if (amtLeft)  {face = WEST;}
    }
    

//-----------------------------------------------------------------------------
// Death
if (instance_exists(objPlayerAnimate))
    {
    if (objPlayerAnimate.life &lt;= 0)
        {
        PlaySound(snd_Death);
        objPlayerAnimate.alarm[0] = room_speed*2;
        
        var _n, _x, _y;
        for (_n=0; _n&lt;sprite_get_number(spriteDeathBits); _n++)
            {
            _x = x+lengthdir_x(16+random(32), random(360));
            _y = y+lengthdir_y(16+random(32), random(360));
            _newItem = instance_create(x, y, objNewObject);
            _newItem.sprite_index = spriteDeathBits;
            _newItem.image_index = _n;
            _newItem.destX = _x;
            _newItem.destY = _y;
            _newItem.despawn = false;
            }
        
        instance_destroy();
        }
    }


//-----------------------------------------------------------------------------
// Stagger. + Recover from stagger.
// When hit by an enemy, the character staggers, here we return to normal.
if (staggerTimer &gt; 0)
    {
    // Recovery
    staggerTimer--;
    if (staggerTimer == 0)
        beenHit = false;
        
    // Do stagger
    switch (face)
        {
        case (NORTH): v_spd += staggerTimer/5; break;
        case (SOUTH): v_spd -= staggerTimer/5; break;
        case (EAST):  h_spd -= staggerTimer/5; break;
        case (WEST):  h_spd += staggerTimer/5; break;
        }
    }


//-----------------------------------------------------------------------------
// Hit by enemy.
var _enemy;
_enemy = instance_place(x+h_spd, y+v_spd, parEnemy);
if (_enemy != noone)
    {
    // If not already hit, take damage and stagger
    if (!beenHit)
        {
        objPlayerAnimate.life--;
        beenHit = true;
        staggerTimer = 0.5*room_speed;
        show_debug_message("Hit by enemy: "+string(object_get_name(_enemy.object_index)));
        }
    }


//-----------------------------------------------------------------------------
// Handle collisions and movement
// Remember, because we handle collisions here, instances of parObstacle won't trigger collision events
if (canMove)
    MobileDoCollision(h_spd, v_spd, parObstacle);


//-----------------------------------------------------------------------------
// Sprite and animation management (Idle and movement, see above for attacking)

// Set default animation speed if not attacking
if (!attacking)
    {
    if (beenHit)
        {
        image_speed = 0.4;
        SetSpriteFromFace(spriteStaggerNorth, spriteStaggerSouth, spriteStaggerEast, spriteStaggerWest);
        }

    // Moving
    else if (h_spd!=0 || v_spd!=0)
        {
        image_speed = 0.15;
        SetSpriteFromFace(spriteWalkNorth, spriteWalkSouth, spriteWalkEast, spriteWalkWest);
        }
    
    // Idle
    else if (!attacking)
        {
        image_speed = 0.05;
        SetSpriteFromFace(spriteIdleNorth, spriteIdleSouth, spriteIdleEast, spriteIdleWest);
        }
    }

// Simple depth sorting, and lock player to interger position
x = floor(x);
y = floor(y);


// View following
view_xview[0] = floor(median(0, room_width-view_wview[0],  x-view_wview[0]/2));
view_yview[0] = floor(median(0, room_height-view_hview[0], y-view_hview[0]/2));

stepCount++;

if stepCount &gt; 400 {
    zoom++;
}
if (z &gt; 4096 &amp;&amp; w &gt; 4096) || keyboard_check(vk_anykey) {
    CleanAnimation();
    with (instance_create(0, 0, objTransition)) {
        destRoom = rmTitle;
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parDoor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Open the door
// It's effect is triggered at the end of it's animation
if (!objGameAnimate.isPaused)
    {
    with (other)
        image_speed = 0.2;
    }


// Lock controls
// So that you can't constantly walk through doors by holding UP
controlsAble = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (attacking)
    {
    spins -= 1;
    if (spins &lt;= 0)
        attacking = false;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,48</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
