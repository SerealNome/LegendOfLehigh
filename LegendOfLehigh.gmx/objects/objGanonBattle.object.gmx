<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGanonNormal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parEnemy</parentName>
  <maskName>sprSnowMonsterMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
event_inherited();

count = 2700;
hide = false;
wait = false;            // Used to flag wether NPC is in dialogue, and should wait

temp = 0;
quest = -1;
displayAnim = 0;
displayMarker = -1;

// Default text (speech)
textPickRandomly = false;
text[0, 0] = "NO TEXT SET#Set in creation code of instance in room editor!";
type[0, 0] = 0;
response[0, 0] = "";
outcome[0, 0] = -1;

// Initial image settings
SetSpritesGanonNormal();
image_xscale = 1.0;
image_yscale = 1.0;


// Basic stats for the mob
life = 20;
mySpeed = 1;        // How fast this mob moves in pixels-per-step
docile = false;     // Whether this mob is docile (non-agressive)


myLife = life;
paces = 0;
face = choose(NORTH, EAST, SOUTH, WEST);
canMove = false;
horiSpeed = 0;
vertSpeed = 0;
state = STATE_IDLE;
stateSwitched = false;
idleTimer = 1*room_speed;
staggerTimer = -1;
beenHit = false;
image_speed = 0;

dead = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead == true {
    count++;
    switch (count) {
        case 2702:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 2766:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 2830:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 2894:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 2958:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3018:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3074:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3112:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3128:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3144:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3152:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3160:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3164:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3168:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3170:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3172:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3174:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3176:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3177:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3178:
            with (objGanonBattle) {
                SetSpritesGanonNormal();
                image_index = 2;
            }
            break;
        case 3179:
            with (objGanonBattle) {
                SetSpritesGanonSpell();
                image_index = 2;
            }
            break;
        case 3180:
            with (objPlayer) life = 0;
            break;
    }
}
// If the game is paused, interrupt everything
if (objGame.isPaused)
    {
    image_index -= image_speed;
    exit;
    }

event_inherited();

    
//-----------------------------------------------------------------------------
// Simple AI
// This has to be after collision/movement code in order to pick up changes.
switch (state)
    {
    case (STATE_IDLE):
        idleTimer--;
        if (idleTimer &lt;= 0)
            state = STATE_IDLE;
        break;
        
    case (STATE_ATTACK):
        // Starting Attack
        if (stateSwitched)
            {
            stateSwitched = false;
            horiSpeed = 0;
            vertSpeed = 0;
            SetSpriteFromFace(spriteAttackNorth, spriteAttackSouth, spriteAttackEast, spriteAttackWest);
            image_index = 0;
            
            if (instance_exists(objPlayerCharacter))
                {
                if (!objPlayerCharacter.beenHit)
                    {
                    PlaySound(snd_GetHit);
                    objPlayer.life--;
                    objPlayerCharacter.beenHit = true;
                    objPlayerCharacter.staggerTimer = 0.5*room_speed;
                    objPlayerCharacter.face = GetOppositeDirection(face);
                    show_debug_message("Hit by enemy: "+string(object_get_name(object_index)));
                    }
                }
            }
        
        // Ending Attack
        if (round(image_index) &gt;= image_number)
            state = STATE_IDLE;
        break;
        
    case (STATE_STOP):
        horiSpeed = 0;
        vertSpeed = 0;
        state = STATE_IDLE;
        idleTimer = 1*room_speed;
        break;
        
    case (STATE_STAGGER):
        staggerTimer--;
        if (staggerTimer &lt;= 0)
            {
            state = STATE_IDLE;
            beenHit = false;
            }
            
        // Do stagger
        vertSpeed = 0;
        horiSpeed = 0;
        switch (face)
            {
            case (NORTH): vertSpeed = staggerTimer/5; break;
            case (SOUTH): vertSpeed = -staggerTimer/5; break;
            case (EAST):  horiSpeed = -staggerTimer/5; break;
            case (WEST):  horiSpeed = staggerTimer/5; break;
            }
        break;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>33,66</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
